/*Esquema de Detektor analytics*/ 
CREATE SCHEMA base AUTHORIZATION postgres; 
/*Secuencias*/ 
CREATE SEQUENCE base.sc_tb_ifeb_bi_driver_pk_drvr_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_driver_pk_drvr_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_event_pk_event_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_event_pk_event_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_fact_event_pk_fact_event_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_fact_event_pk_fact_event_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_fact_pk_fact_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_fact_pk_fact_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_geofence_pk_geofence_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_geofence_pk_geofence_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_group_pk_group_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_group_pk_group_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_time_pk_time_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_time_pk_time_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_vehicle_event_count_pk_vhcl_event_count_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_vehicle_event_count_pk_vhcl_event_count_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_vehicle_measure_pk_vhcl_measure_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_vehicle_measure_pk_vhcl_measure_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_vehicle_pk_vhcl_id INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_vehicle_pk_vhcl_id OWNER TO usereboras; CREATE SEQUENCE base.sc_tb_ifeb_bi_driver_login_logout INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ALTER TABLE base.sc_tb_ifeb_bi_driver_login_logout OWNER TO usereboras;
/*Tablas*/ 
CREATE TABLE base.tb_ifeb_bi_driver ( pk_drvr_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_driver_pk_drvr_id'::regclass), drvr_name character varying NOT NULL, drvr_identification character varying NOT NULL, drvr_platform_id integer, drvr_license character varying, drvr_category_license character varying, drvr_document character varying, drvr_birth_date timestamp with time zone, drvr_gender character varying, drvr_education_level character varying, drvr_registration_city character varying, CONSTRAINT tb_ifeb_bi_driver_pk_drvr_id PRIMARY KEY (pk_drvr_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_driver OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_event ( pk_event_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_event_pk_event_id'::regclass), event_cod integer NOT NULL, event_name character varying NOT NULL, collection character varying NOT NULL, CONSTRAINT tb_ifeb_bi_event_pk_event_id PRIMARY KEY (pk_event_id), CONSTRAINT tb_ifeb_bi_event_event_cod_key UNIQUE (event_cod) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_event OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_fact ( pk_fact_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_fact_pk_fact_id'::regclass), date_gps timestamp without time zone NOT NULL, date_frame timestamp without time zone NOT NULL, date_frame_unit timestamp without time zone NOT NULL, protocol character varying NOT NULL, code_product character varying NOT NULL, unique_id character varying, number_alarm character varying, gps_accuracy character varying, speed character varying, azimuth character varying, altitude character varying, latitude double precision, longitude double precision, mcc character varying, mnc character varying, lac character varying, cell_id character varying, mileage character varying, driver_identification character varying, e1ternal_power_analog_input_vcc character varying, e1ternal_antenna character varying, power_analog character varying, e1ternal_power character varying, hour_meter_count character varying, analog_input_one character varying, analog_input_two character varying, backup_battery character varying, device_status character varying, battery_porcentage character varying, odo_mileage_one character varying, temperature character varying, ignition_off_fuel_level character varying, current_fuel_level character varying, e1ternal_power_supply character varying, e1ternal_power_vcc character varying, duration_ignition_off character varying, reason character varying, course character varying, horometro character varying, distance_traveled character varying, area_type character varying, area_mask character varying, name_event character varying, backup_battery_porcetage character varying, status_gps character varying, satellite_number character varying, temperature_sensor_device_id character varying, temperature_sensor_device_data character varying, geofence_cod integer, time_cod character varying, group_cod integer, collection character varying, CONSTRAINT tb_ifeb_bi_fact_pk_fact_id PRIMARY KEY (pk_fact_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_fact OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_fact_event ( pk_fact_event_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_fact_event_pk_fact_event_id'::regclass), date_gps timestamp without time zone NOT NULL, date_frame timestamp without time zone NOT NULL, date_frame_unit timestamp without time zone NOT NULL, protocol character varying NOT NULL, code_product character varying NOT NULL, unique_id character varying, number_alarm character varying, gps_accuracy character varying, speed character varying, azimuth character varying, altitude character varying, latitude double precision, longitude double precision, mcc character varying, mnc character varying, lac character varying, cell_id character varying, mileage character varying, driver_identification character varying, e1ternal_power_analog_input_vcc character varying, e1ternal_antenna character varying, power_analog character varying, e1ternal_power character varying, hour_meter_count character varying, analog_input_one character varying, analog_input_two character varying, backup_battery character varying, device_status character varying, battery_porcentage character varying, odo_mileage_one character varying, temperature character varying, ignition_off_fuel_level character varying, current_fuel_level character varying, e1ternal_power_supply character varying, e1ternal_power_vcc character varying, duration_ignition_off character varying, reason character varying, course character varying, horometro character varying, distance_traveled character varying, area_type character varying, area_mask character varying, name_event character varying, backup_battery_porcetage character varying, status_gps character varying, satellite_number character varying, temperature_sensor_device_id character varying, temperature_sensor_device_data character varying, geofence_cod integer, time_cod character varying, group_cod integer, collection character varying, CONSTRAINT tb_ifeb_bi_fact_pk_fact_event_id PRIMARY KEY (pk_fact_event_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_fact_event OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_geofence ( pk_geofence_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_geofence_pk_geofence_id'::regclass), geofence_type character varying NOT NULL, geofence_name character varying NOT NULL, geofence_cod integer, CONSTRAINT tb_ifeb_bi_geofence_pk_geofence PRIMARY KEY (pk_geofence_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_geofence OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_group ( pk_group_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_group_pk_group_id'::regclass), group_cod integer NOT NULL, group_name character varying NOT NULL, CONSTRAINT tb_ifeb_bi_group_pk_group_id PRIMARY KEY (pk_group_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_group OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_time ( pk_time_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_time_pk_time_id'::regclass), time_hour integer NOT NULL, time_day integer NOT NULL, time_month integer NOT NULL, time_year integer NOT NULL, time_week integer NOT NULL, time_bimester integer NOT NULL, time_trimester integer NOT NULL, time_semester integer NOT NULL, time_date date NOT NULL, time_day_name character varying NOT NULL, time_month_name character varying NOT NULL, time_day_week integer NOT NULL, time_cod character varying, time_utc character varying, CONSTRAINT tb_ifeb_bi_time_pk_time_id PRIMARY KEY (pk_time_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_time OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_vehicle ( pk_vhcl_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_vehicle_pk_vhcl_id'::regclass), vhcl_plate character varying NOT NULL, vhcl_alias character varying NOT NULL, vhcl_cp character varying NOT NULL, vhcl_protocol character varying NOT NULL, vhcl_owner character varying, vhcl_line character varying, vhcl_service character varying, vhcl_class character varying, vhcl_bodywork character varying, vhcl_type character varying, vhcl_chasis character varying, vhcl_cylinder character varying, vhcl_color character varying, vhcl_brand character varying, vhcl_motor character varying, vhcl_model character varying, vhcl_soat character varying, vhcl_utc character varying NOT NULL, vhcl_date_register timestamp without time zone, CONSTRAINT tb_ifeb_bi_vehicle_pk_vhcl_id PRIMARY KEY (pk_vhcl_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_vehicle OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_vehicle_event_count ( pk_vhcl_event_count_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_vehicle_event_count_pk_vhcl_event_count_id'::regclass), code_product character varying NOT NULL, time_cod character varying NOT NULL, event_cod integer NOT NULL, event_count integer NOT NULL, CONSTRAINT tb_ifeb_bi_vehicle_event_count_pk_vhcl_event_count_id PRIMARY KEY (pk_vhcl_event_count_id), CONSTRAINT tb_ifeb_bi_vehicle_event_coun_fk_vhcl_id_fk_time_id_fk_even_key UNIQUE (code_product, time_cod, event_cod) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_vehicle_event_count OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_vehicle_measure ( pk_vhcl_measure_id integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_vehicle_measure_pk_vhcl_measure_id'::regclass), distance integer NOT NULL, activity_time integer NOT NULL, speed_average integer NOT NULL, fk_vhcl_id integer NOT NULL, fk_time_id integer NOT NULL, idle integer, speed_max integer, CONSTRAINT tb_ifeb_bi_vehicle_measure_pk_vhcl_measure_id PRIMARY KEY (pk_vhcl_measure_id) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_vehicle_measure OWNER TO usereboras; CREATE TABLE base.tb_ifeb_bi_driver_login_logout ( pk_drvr_log_in_out integer NOT NULL DEFAULT nextval('base.sc_tb_ifeb_bi_driver_login_logout'::regclass), fk_vhcl_id integer NOT NULL, fk_time_id integer NOT NULL, fk_drvr_id integer NOT NULL, drlo_driv_id character varying, drlo_date_login timestamp without time zone, drlo_date_logout timestamp without time zone, connection_time character varying, CONSTRAINT tb_ifeb_bi_driver_login_logout_pk_drvr_log_in_out PRIMARY KEY (pk_drvr_log_in_out) ) WITH ( OIDS=TRUE ); ALTER TABLE base.tb_ifeb_bi_driver_login_logout OWNER TO usereboras;
/*Vistas*/ 
CREATE OR REPLACE VIEW base.vw_ifeb_bi_speed_by_range AS SELECT ti.time_date, c.code_product, CASE WHEN total.cantidad IS NOT NULL THEN total.cantidad ELSE 0::bigint END AS total, CASE WHEN v_0_20.cantidad IS NOT NULL THEN v_0_20.cantidad ELSE 0::bigint END AS cantidad_v_0_20, CASE WHEN v_0_20.cantidad IS NOT NULL THEN (v_0_20.cantidad * 100)::double precision / total.cantidad::double precision ELSE 0::bigint::double precision END AS porcentaje_v_0_20, CASE WHEN v_20_40.cantidad IS NOT NULL THEN v_20_40.cantidad ELSE 0::bigint END AS cantidad_v_20_40, CASE WHEN v_20_40.cantidad IS NOT NULL THEN (v_20_40.cantidad * 100)::double precision / total.cantidad::double precision ELSE 0::bigint::double precision END AS porcentaje_v_20_40, CASE WHEN v_40_60.cantidad IS NOT NULL THEN v_40_60.cantidad ELSE 0::bigint END AS cantidad_v_40_60, CASE WHEN v_40_60.cantidad IS NOT NULL THEN (v_40_60.cantidad * 100)::double precision / total.cantidad::double precision ELSE 0::bigint::double precision END AS porcentaje_v_40_60, CASE WHEN v_60_80.cantidad IS NOT NULL THEN v_60_80.cantidad ELSE 0::bigint END AS cantidad_v_60_80, CASE WHEN v_60_80.cantidad IS NOT NULL THEN (v_60_80.cantidad * 100)::double precision / total.cantidad::double precision ELSE 0::bigint::double precision END AS porcentaje_v_60_80, CASE WHEN v_80_100.cantidad IS NOT NULL THEN v_80_100.cantidad ELSE 0::bigint END AS cantidad_v_80_100, CASE WHEN v_80_100.cantidad IS NOT NULL THEN (v_80_100.cantidad * 100)::double precision / total.cantidad::double precision ELSE 0::bigint::double precision END AS porcentaje_v_80_100, CASE WHEN v_mas_100.cantidad IS NOT NULL THEN v_mas_100.cantidad ELSE 0::bigint END AS cantidad_v_mas_100, CASE WHEN v_mas_100.cantidad IS NOT NULL THEN (v_mas_100.cantidad * 100)::double precision / total.cantidad::double precision ELSE 0::bigint::double precision END AS porcentaje_v_mas_100 FROM base.tb_ifeb_bi_vehicle_event_count c JOIN base.tb_ifeb_bi_time ti ON c.time_cod::text = ti.time_cod::text LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 	FROM base.tb_ifeb_bi_vehicle_measure 	JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 	JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 	WHERE tb_ifeb_bi_vehicle_measure.speed_average >= 0 AND tb_ifeb_bi_vehicle_measure.speed_average <= 20 	GROUP BY t.time_date, v.vhcl_cp) v_0_20 ON v_0_20.vhcl_cp::text = c.code_product::text 	AND v_0_20.time_date = ti.time_date 	LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 	FROM base.tb_ifeb_bi_vehicle_measure 	JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 	JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 	WHERE tb_ifeb_bi_vehicle_measure.speed_average > 20 AND tb_ifeb_bi_vehicle_measure.speed_average <= 40 	GROUP BY t.time_date, v.vhcl_cp) v_20_40 ON v_20_40.vhcl_cp::text = c.code_product::text 	AND v_20_40.time_date = ti.time_date 	LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 		FROM base.tb_ifeb_bi_vehicle_measure 		JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 		JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 		WHERE tb_ifeb_bi_vehicle_measure.speed_average > 40 AND tb_ifeb_bi_vehicle_measure.speed_average <= 60 		GROUP BY t.time_date, v.vhcl_cp) v_40_60 ON v_40_60.vhcl_cp::text = c.code_product::text 	 AND v_40_60.time_date = ti.time_date 	 LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 	 FROM base.tb_ifeb_bi_vehicle_measure 	 JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 	 JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 	 WHERE tb_ifeb_bi_vehicle_measure.speed_average > 60 AND tb_ifeb_bi_vehicle_measure.speed_average <= 80 	 GROUP BY t.time_date, v.vhcl_cp) v_60_80 ON v_60_80.vhcl_cp::text = c.code_product::text 	 AND v_60_80.time_date = ti.time_date 	 LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 	 FROM base.tb_ifeb_bi_vehicle_measure 	 JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 	 JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 	 WHERE tb_ifeb_bi_vehicle_measure.speed_average > 80 AND tb_ifeb_bi_vehicle_measure.speed_average <= 100 	 GROUP BY t.time_date, v.vhcl_cp) v_80_100 ON v_80_100.vhcl_cp::text = c.code_product::text 	 AND v_80_100.time_date = ti.time_date 	 LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 	 FROM base.tb_ifeb_bi_vehicle_measure 	 JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 	 JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 	 WHERE tb_ifeb_bi_vehicle_measure.speed_average > 100 GROUP BY t.time_date, v.vhcl_cp) v_mas_100 	 ON v_mas_100.vhcl_cp::text = c.code_product::text AND v_mas_100.time_date = ti.time_date 	 LEFT JOIN ( SELECT t.time_date, count(tb_ifeb_bi_vehicle_measure.pk_vhcl_measure_id) AS cantidad, v.vhcl_cp 	 FROM base.tb_ifeb_bi_vehicle_measure 	 JOIN base.tb_ifeb_bi_time t ON tb_ifeb_bi_vehicle_measure.fk_time_id = t.pk_time_id 	 JOIN base.tb_ifeb_bi_vehicle v ON tb_ifeb_bi_vehicle_measure.fk_vhcl_id = v.pk_vhcl_id 	 GROUP BY t.time_date, v.vhcl_cp) total ON total.vhcl_cp::text = c.code_product::text 	 AND total.time_date = ti.time_date 	 GROUP BY ti.time_date, c.code_product, v_0_20.cantidad, total.cantidad, v_20_40.cantidad, v_40_60.cantidad, 	 v_60_80.cantidad, v_80_100.cantidad, v_mas_100.cantidad, 	 CASE WHEN v_0_20.cantidad IS NOT NULL THEN v_0_20.cantidad ELSE 0::bigint END, 	 CASE WHEN v_20_40.cantidad IS NOT NULL THEN v_20_40.cantidad ELSE 0::bigint END, 	 CASE WHEN v_40_60.cantidad IS NOT NULL THEN v_40_60.cantidad ELSE 0::bigint END, 	 CASE WHEN v_60_80.cantidad IS NOT NULL THEN v_60_80.cantidad ELSE 0::bigint END, 	 CASE WHEN v_80_100.cantidad IS NOT NULL THEN v_80_100.cantidad ELSE 0::bigint END, 	 CASE WHEN v_mas_100.cantidad IS NOT NULL THEN v_mas_100.cantidad ELSE 0::bigint END, 	 CASE WHEN v_0_20.cantidad IS NOT NULL THEN v_0_20.cantidad * 100 / total.cantidad ELSE 0::bigint END, 	 CASE WHEN v_20_40.cantidad IS NOT NULL THEN v_20_40.cantidad * 100 / total.cantidad ELSE 0::bigint END, 	 CASE WHEN v_40_60.cantidad IS NOT NULL THEN v_40_60.cantidad * 100 / total.cantidad ELSE 0::bigint END, 	 CASE WHEN v_60_80.cantidad IS NOT NULL THEN v_60_80.cantidad * 100 / total.cantidad ELSE 0::bigint END, 	 CASE WHEN v_80_100.cantidad IS NOT NULL THEN v_80_100.cantidad * 100 / total.cantidad ELSE 0::bigint END, 	 CASE WHEN v_mas_100.cantidad IS NOT NULL THEN v_mas_100.cantidad * 100 / total.cantidad ELSE 0::bigint END, 	 CASE WHEN total.cantidad IS NOT NULL THEN total.cantidad ELSE 0::bigint END; 
CREATE OR REPLACE VIEW base.vw_ifeb_bi_alarms_by_range_day AS SELECT t.time_date, e.event_name AS name_event, c.code_product, count(c.event_count) AS total, CASE WHEN v_madrugada.cantidad IS NOT NULL THEN v_madrugada.cantidad ELSE 0::bigint END AS cantidad_madrugada, CASE WHEN v_madrugada.cantidad IS NOT NULL THEN (v_madrugada.cantidad * 100)::double precision / count(c.event_count)::double precision ELSE 0::double precision END AS porcentaje_madrugada, CASE WHEN v_manana.cantidad IS NOT NULL THEN v_manana.cantidad ELSE 0::bigint END AS cantidad_manana, CASE WHEN v_manana.cantidad IS NOT NULL THEN (v_manana.cantidad * 100)::double precision / count(c.event_count)::double precision ELSE 0::double precision END AS porcentaje_manana, CASE WHEN v_tarde.cantidad IS NOT NULL THEN v_tarde.cantidad ELSE 0::bigint END AS cantidad_tarde, CASE WHEN v_tarde.cantidad IS NOT NULL THEN (v_tarde.cantidad * 100)::double precision / count(c.event_count)::double precision ELSE 0::double precision END AS porcentaje_tarde, CASE WHEN v_noche.cantidad IS NOT NULL THEN v_noche.cantidad ELSE 0::bigint END AS cantidad_noche, CASE WHEN v_noche.cantidad IS NOT NULL THEN (v_noche.cantidad * 100)::double precision / count(c.event_count)::double precision ELSE 0::double precision END AS porcentaje_noche FROM base.tb_ifeb_bi_vehicle_event_count c JOIN base.tb_ifeb_bi_event e ON c.event_cod = e.event_cod JOIN base.tb_ifeb_bi_time t ON c.time_cod::text = t.time_cod::text LEFT JOIN ( SELECT count(ca.code_product) AS cantidad, ti.time_date, ca.code_product, e.event_name FROM base.tb_ifeb_bi_vehicle_event_count ca JOIN base.tb_ifeb_bi_event e ON ca.event_cod = e.event_cod JOIN base.tb_ifeb_bi_time ti ON ca.time_cod::text = ti.time_cod::text AND ti.time_hour >= 0 AND ti.time_hour <= 5 GROUP BY ti.time_date, ca.code_product, e.event_name) v_madrugada ON c.code_product::text = v_madrugada.code_product::text AND t.time_date = v_madrugada.time_date AND e.event_name::text = v_madrugada.event_name::text LEFT JOIN ( SELECT count(ca.code_product) AS cantidad, ti.time_date, ca.code_product, e.event_name FROM base.tb_ifeb_bi_vehicle_event_count ca JOIN base.tb_ifeb_bi_event e ON ca.event_cod = e.event_cod JOIN base.tb_ifeb_bi_time ti ON ca.time_cod::text = ti.time_cod::text AND ti.time_hour > 5 AND ti.time_hour <= 11 GROUP BY ti.time_date, ca.code_product, e.event_name) v_manana ON c.code_product::text = v_manana.code_product::text AND t.time_date = v_manana.time_date AND e.event_name::text = v_manana.event_name::text LEFT JOIN ( SELECT count(ca.code_product) AS cantidad, ti.time_date, ca.code_product, e.event_name FROM base.tb_ifeb_bi_vehicle_event_count ca JOIN base.tb_ifeb_bi_event e ON ca.event_cod = e.event_cod JOIN base.tb_ifeb_bi_time ti ON ca.time_cod::text = ti.time_cod::text AND ti.time_hour > 11 AND ti.time_hour <= 17 GROUP BY ti.time_date, ca.code_product, e.event_name) v_tarde ON c.code_product::text = v_tarde.code_product::text AND t.time_date = v_tarde.time_date AND e.event_name::text = v_tarde.event_name::text LEFT JOIN ( SELECT count(ca.code_product) AS cantidad, ti.time_date, ca.code_product, e.event_name FROM base.tb_ifeb_bi_vehicle_event_count ca JOIN base.tb_ifeb_bi_event e ON ca.event_cod = e.event_cod JOIN base.tb_ifeb_bi_time ti ON ca.time_cod::text = ti.time_cod::text AND ti.time_hour >= 18 GROUP BY ti.time_date, ca.code_product, e.event_name) v_noche ON c.code_product::text = v_noche.code_product::text AND t.time_date = v_noche.time_date AND e.event_name::text = v_noche.event_name::text GROUP BY t.time_date, e.event_name, c.code_product, v_madrugada.cantidad, v_manana.cantidad, v_tarde.cantidad, v_noche.cantidad ORDER BY t.time_date;
CREATE OR REPLACE VIEW base.vw_ifeb_bi_ds_alarms AS SELECT CASE WHEN d.drvr_name IS NOT NULL AND d.drvr_platform_id <> 0 THEN d.drvr_name ELSE v.vhcl_owner END AS cliente, v.vhcl_plate AS placa, date_part('year'::text, age( CASE WHEN d.drvr_birth_date IS NULL THEN now() ELSE d.drvr_birth_date END)) AS edad, t.time_date AS fecha, t.time_day AS dia, t.time_day_name AS dia_semana, t.time_month_name AS mes, t.time_month AS mes_n, t.time_year AS anio, t.time_trimester AS trimestre, t.time_hour AS hora, t.time_hour AS hora_n, CASE WHEN t.time_hour >= 0 AND t.time_hour <= 5 THEN 'Madrugada'::text WHEN t.time_hour > 5 AND t.time_hour <= 11 THEN 'Mañana'::text WHEN t.time_hour > 11 AND t.time_hour <= 17 THEN 'Tarde'::text ELSE 'Noche'::text END AS rango_horas, t.time_week AS semana, CASE WHEN m.distance IS NOT NULL THEN m.distance ELSE 0 END AS distancia_calculada, CASE WHEN m.speed_average IS NOT NULL THEN m.speed_average ELSE 0 END AS velocidad, CASE WHEN m.speed_average >= 0 AND m.speed_average <= 20 OR m.speed_average IS NULL THEN '0-20'::text WHEN m.speed_average > 20 AND m.speed_average <= 40 THEN '20-40'::text WHEN m.speed_average > 40 AND m.speed_average <= 60 THEN '40-60'::text WHEN m.speed_average > 60 AND m.speed_average <= 80 THEN '60-80'::text WHEN m.speed_average > 80 AND m.speed_average <= 100 THEN '80-100'::text ELSE '> 100'::text END AS range_speed, CASE WHEN m.activity_time IS NOT NULL THEN m.activity_time ELSE 0 END AS tiempo_actividad, e.event_name AS evento, c.event_count AS contador FROM base.tb_ifeb_bi_vehicle_event_count c JOIN base.tb_ifeb_bi_vehicle v ON c.code_product::text = v.vhcl_cp::text JOIN base.tb_ifeb_bi_time t ON c.time_cod::text = t.time_cod::text LEFT JOIN base.tb_ifeb_bi_vehicle_measure m ON m.fk_vhcl_id = v.pk_vhcl_id AND m.fk_time_id = t.pk_time_id LEFT JOIN base.tb_ifeb_bi_driver_login_logout l on (m.fk_vhcl_id=l.fk_vhcl_id and m.fk_time_id=l.fk_time_id) LEFT JOIN base.tb_ifeb_bi_driver d ON l.fk_drvr_id = d.pk_drvr_id JOIN base.tb_ifeb_bi_event e ON c.event_cod = e.event_cod ORDER BY t.time_date, t.time_hour;
CREATE OR REPLACE VIEW  base.vw_ifeb_bi_ds_bi AS SELECT CASE WHEN measures.cliente IS NULL THEN 'No Definido'::character varying ELSE measures.cliente END AS cliente, t.time_month_name AS mes, t.time_month AS mes_n, v.vhcl_plate AS placa, t.time_week AS semana, t.time_date AS fecha, t.time_day AS dia, t.time_day_name AS dia_semana, vw.cantidad_madrugada, vw.porcentaje_madrugada, vw.cantidad_manana, vw.porcentaje_manana, vw.cantidad_tarde, vw.porcentaje_tarde, vw.cantidad_noche, vw.porcentaje_noche, sbr.cantidad_v_0_20, sbr.cantidad_v_20_40, sbr.cantidad_v_40_60, sbr.cantidad_v_60_80, sbr.cantidad_v_80_100, sbr.cantidad_v_mas_100, sbr.porcentaje_v_0_20, sbr.porcentaje_v_20_40, sbr.porcentaje_v_40_60, sbr.porcentaje_v_60_80, sbr.porcentaje_v_80_100, sbr.porcentaje_v_mas_100, CASE WHEN e.event_cod = 4025 THEN 1 ELSE 0 END AS aceleracion_fuerte, CASE WHEN e.event_cod = 4018 THEN 1 ELSE 0 END AS frenada_fuerte, CASE WHEN e.event_cod = 7 THEN 1 ELSE 0 END AS exceso_velocidad, CASE WHEN measures.speed_average IS NOT NULL THEN measures.speed_average ELSE 0::numeric END AS vel_promedio, CASE WHEN measures.max_speed IS NOT NULL THEN measures.max_speed ELSE 0 END AS vel_maxima, vw.cantidad_madrugada + vw.cantidad_manana + vw.cantidad_tarde + vw.cantidad_noche AS total_alarmas, CASE WHEN measures.distance IS NOT NULL THEN measures.distance ELSE 0::numeric END AS distancia_recorrida, CASE WHEN measures.activity_time IS NOT NULL THEN measures.activity_time ELSE 0::numeric END AS horas, date_part('year'::text, age( CASE WHEN measures.drvr_birth_date IS NULL THEN now() ELSE measures.drvr_birth_date END)) AS edad, CASE WHEN (measures.drvr_gender IS NOT NULL and measures.drvr_gender<>'null') THEN measures.drvr_gender ELSE 'No definido'::character varying END AS genero, t.time_trimester AS trimestre FROM  base.tb_ifeb_bi_vehicle_event_count c JOIN  base.tb_ifeb_bi_event e ON c.event_cod = e.event_cod JOIN  base.tb_ifeb_bi_time t ON c.time_cod::text = t.time_cod::text JOIN  base.tb_ifeb_bi_vehicle v ON c.code_product::text = v.vhcl_cp::text LEFT JOIN ( SELECT vw_ifeb_bi_alarms_by_range_day.time_date, vw_ifeb_bi_alarms_by_range_day.code_product, sum(vw_ifeb_bi_alarms_by_range_day.total) AS total, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_madrugada) AS cantidad_madrugada, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_madrugada) * 100::numeric / sum(vw_ifeb_bi_alarms_by_range_day.total) AS porcentaje_madrugada, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_manana) AS cantidad_manana, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_manana) * 100::numeric / sum(vw_ifeb_bi_alarms_by_range_day.total) AS porcentaje_manana, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_tarde) AS cantidad_tarde, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_tarde) * 100::numeric / sum(vw_ifeb_bi_alarms_by_range_day.total) AS porcentaje_tarde, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_noche) AS cantidad_noche, sum(vw_ifeb_bi_alarms_by_range_day.cantidad_noche) * 100::numeric / sum(vw_ifeb_bi_alarms_by_range_day.total) AS porcentaje_noche FROM  base.vw_ifeb_bi_alarms_by_range_day GROUP BY vw_ifeb_bi_alarms_by_range_day.time_date, vw_ifeb_bi_alarms_by_range_day.code_product) vw ON c.code_product::text = vw.code_product::text AND t.time_date = vw.time_date LEFT JOIN  base.vw_ifeb_bi_speed_by_range sbr ON c.code_product::text = sbr.code_product::text AND t.time_date = sbr.time_date LEFT JOIN ( SELECT d.drvr_gender, d.drvr_birth_date, CASE WHEN d.drvr_platform_id = 0 THEN CASE WHEN v_1.vhcl_owner::text = 'null'::text THEN 'No Definido'::character varying ELSE v_1.vhcl_owner END ELSE d.drvr_name END AS cliente, t_1.time_date, avg(m.distance) AS distance, avg(m.speed_average) AS speed_average, max(m.speed_average) AS max_speed, avg(m.activity_time) AS activity_time, m.fk_vhcl_id, v_1.vhcl_cp FROM  base.tb_ifeb_bi_vehicle_measure m JOIN  base.tb_ifeb_bi_time t_1 ON m.fk_time_id = t_1.pk_time_id JOIN  base.tb_ifeb_bi_vehicle v_1 ON m.fk_vhcl_id = v_1.pk_vhcl_id LEFT JOIN  base.tb_ifeb_bi_driver_login_logout l on (m.fk_vhcl_id=l.fk_vhcl_id and m.fk_time_id=l.fk_time_id) LEFT JOIN  base.tb_ifeb_bi_driver d ON l.fk_drvr_id = d.pk_drvr_id	 GROUP BY d.drvr_gender, d.drvr_birth_date, v_1.vhcl_owner, d.drvr_platform_id, d.drvr_name, t_1.time_date, m.fk_vhcl_id, v_1.vhcl_cp) measures ON t.time_date = measures.time_date AND v.pk_vhcl_id = measures.fk_vhcl_id AND c.code_product::text = v.vhcl_cp::text GROUP BY t.time_date, v.vhcl_plate, measures.cliente, t.time_month_name, t.time_month, t.time_week, t.time_day, t.time_day_name, vw.cantidad_madrugada, vw.porcentaje_madrugada, vw.cantidad_manana, vw.porcentaje_manana, vw.cantidad_tarde, vw.porcentaje_tarde, vw.cantidad_noche, vw.porcentaje_noche, sbr.cantidad_v_0_20, sbr.cantidad_v_20_40, sbr.cantidad_v_40_60, sbr.cantidad_v_60_80, sbr.cantidad_v_80_100, sbr.cantidad_v_mas_100, sbr.porcentaje_v_0_20, sbr.porcentaje_v_20_40, sbr.porcentaje_v_40_60, sbr.porcentaje_v_60_80, sbr.porcentaje_v_80_100, sbr.porcentaje_v_mas_100, CASE WHEN e.event_cod = 4025 THEN 1 ELSE 0 END, CASE WHEN e.event_cod = 4018 THEN 1 ELSE 0 END, CASE WHEN e.event_cod = 7 THEN 1 ELSE 0 END, CASE WHEN measures.speed_average IS NOT NULL THEN measures.speed_average ELSE 0::numeric END, CASE WHEN measures.max_speed IS NOT NULL THEN measures.max_speed ELSE 0 END, CASE WHEN measures.distance IS NOT NULL THEN measures.distance ELSE 0::numeric END, CASE WHEN measures.activity_time IS NOT NULL THEN measures.activity_time ELSE 0::numeric END, date_part('year'::text, age( CASE WHEN drvr_birth_date IS NULL THEN now() ELSE drvr_birth_date END)), drvr_gender, t.time_trimester ORDER BY t.time_date;
CREATE OR REPLACE VIEW  base.vw_ifeb_ds_generic_alarms AS SELECT t.time_date AS fecha_gps, t.time_date AS fecha_unidad, v.vhcl_plate AS placa, v.vhcl_alias AS alias, v.vhcl_cp AS codigo_producto, v.vhcl_protocol AS protocolo, v.vhcl_owner AS propietario, v.vhcl_line AS linea, v.vhcl_service AS servicio, v.vhcl_class AS clase, v.vhcl_bodywork AS carroceria, v.vhcl_chasis AS chasis, v.vhcl_cylinder AS cilindro, v.vhcl_color AS color, v.vhcl_brand AS marca, v.vhcl_motor AS motor, v.vhcl_model AS modelo, v.vhcl_soat AS soat, e.event_name AS evento, c.event_count AS cantidad, t.time_hour AS hora, t.time_day AS dia, t.time_month AS mes, t.time_year AS anio, t.time_week AS semana, t.time_bimester AS bimestre, t.time_trimester AS trimestre, t.time_semester AS semestre, t.time_date AS fecha, t.time_day_name AS nombre_dia, t.time_month_name AS nombre_mes, t.time_day_week AS dia_semana FROM  base.tb_ifeb_bi_vehicle_event_count c LEFT JOIN  base.tb_ifeb_bi_event e ON c.event_cod = e.event_cod LEFT JOIN  base.tb_ifeb_bi_vehicle v ON c.code_product::text = v.vhcl_cp::text LEFT JOIN  base.tb_ifeb_bi_time t ON c.time_cod::text = t.time_cod::text;
CREATE OR REPLACE VIEW  base.vw_ifeb_ds_generic_measures AS SELECT m.distance AS odometro_mts, round(m.distance::numeric / 1000::numeric, 1) AS odometro_km, m.activity_time AS tiempo_actividad_seg, to_char(m.activity_time::double precision * '00:00:01'::interval, 'HH24:MI:SS'::text) AS tiempo_actividad_hh_mm_ss, m.idle AS ralenti, to_char(m.idle::double precision * '00:00:01'::interval, 'HH24:MI:SS'::text) AS ralenti_hh_mm_ss, round(m.speed_average::numeric, 1) AS velocidad_promedio, round(m.speed_max::numeric, 1) AS velocidad_maxima, t.time_hour AS hora, t.time_day AS dia, t.time_month AS mes, t.time_year AS anio, t.time_week AS semana, t.time_bimester AS bimestre, t.time_trimester AS trimestre, t.time_semester AS semestre, t.time_date AS fecha, t.time_day_name AS nombre_dia, t.time_month_name AS nombre_mes, t.time_day_week AS dia_semana, v.vhcl_plate AS placa, v.vhcl_alias AS alias, v.vhcl_cp AS cp, v.vhcl_protocol AS protocolo, v.vhcl_owner AS propietario, v.vhcl_line AS linea, v.vhcl_service AS servicio, v.vhcl_class AS clase, v.vhcl_bodywork AS carroceria, v.vhcl_chasis AS chasis, v.vhcl_cylinder AS cilindro, v.vhcl_color AS color, v.vhcl_brand AS marca, v.vhcl_motor AS motor, v.vhcl_model AS modelo, v.vhcl_soat AS soat, d.drvr_name AS conductor, d.drvr_identification AS identificacion_conductor, d.drvr_license AS licencia_conductor, d.drvr_category_license AS categoria_licencia_conductor, d.drvr_document AS tipo_documento_conductor, d.drvr_birth_date AS fecha_nacimiento_conductor, case when (d.drvr_gender is not null and d.drvr_gender <>'null') then d.drvr_gender else '' end AS genero_conductor, case when (d.drvr_education_level is not null and d.drvr_education_level <>'null') then d.drvr_education_level else '' end AS nivel_educacion_conductor, case when (d.drvr_registration_city is not null and d.drvr_registration_city <>'null') then d.drvr_registration_city else '' end AS ciudad_registro_conductor FROM  base.tb_ifeb_bi_vehicle_measure m JOIN  base.tb_ifeb_bi_time t ON m.fk_time_id = t.pk_time_id JOIN  base.tb_ifeb_bi_vehicle v ON m.fk_vhcl_id = v.pk_vhcl_id LEFT JOIN  base.tb_ifeb_bi_driver_login_logout l on (m.fk_vhcl_id=l.fk_vhcl_id and m.fk_time_id=l.fk_time_id) LEFT JOIN  base.tb_ifeb_bi_driver d ON l.fk_drvr_id = d.pk_drvr_id;
CREATE OR REPLACE VIEW  base.vw_ifeb_event_count AS SELECT t.time_date AS fecha, e.event_name AS evento, v.vhcl_cp AS codigo_producto, v.vhcl_plate AS placa, t.time_day AS dia, t.time_hour AS hora, t.time_month AS mes, sum(c.event_count) AS cantidad FROM  base.tb_ifeb_bi_vehicle_event_count c LEFT JOIN  base.tb_ifeb_bi_vehicle v ON c.code_product::text = v.vhcl_cp::text LEFT JOIN  base.tb_ifeb_bi_time t ON c.time_cod::text = t.time_cod::text LEFT JOIN  base.tb_ifeb_bi_event e ON c.event_cod = e.event_cod GROUP BY t.time_date, e.event_name, v.vhcl_cp, v.vhcl_plate, t.time_day, t.time_hour, t.time_month ORDER BY t.time_date, t.time_hour;
CREATE OR REPLACE VIEW base.vw_ifeb_ds_drivers AS SELECT t.time_date AS fecha, to_char(l.drlo_date_login, 'HH24:MI:SS'::text) AS hora_inicio, to_char(l.drlo_date_logout, 'HH24:MI:SS'::text) AS hora_fin, v.vhcl_plate AS placa, d.drvr_name AS conductor, l.drlo_driv_id AS identificacion, round(m.distance::numeric / 1000::numeric, 1) AS odometro_km, to_char(m.activity_time::double precision * '00:00:01'::interval, 'HH24:MI:SS'::text) AS tiempo_actividad_hh_mm_ss, to_char(m.idle::double precision * '00:00:01'::interval, 'HH24:MI:SS'::text) AS ralenti_hh_mm_ss, round(m.speed_average::numeric, 1) AS velocidad_promedio, round(m.speed_max::numeric, 1) AS velocidad_maxima, CASE WHEN c.event_cod = 4025 THEN c.event_count ELSE 0 END AS aceleracion_fuerte, CASE WHEN c.event_cod = 4018 THEN c.event_count ELSE 0 END AS frenada_fuerte, CASE WHEN c.event_cod = 7 THEN c.event_count ELSE 0 END AS exceso_velocidad FROM base.tb_ifeb_bi_vehicle_event_count c JOIN base.tb_ifeb_bi_vehicle v ON c.code_product::text = v.vhcl_cp::text JOIN base.tb_ifeb_bi_time t ON c.time_cod::text = t.time_cod::text JOIN base.tb_ifeb_bi_driver_login_logout l ON v.pk_vhcl_id = l.fk_vhcl_id AND t.pk_time_id = l.fk_time_id LEFT JOIN base.tb_ifeb_bi_vehicle_measure m ON v.pk_vhcl_id = m.fk_vhcl_id AND t.pk_time_id = m.fk_time_id JOIN base.tb_ifeb_bi_driver d ON l.fk_drvr_id = d.pk_drvr_id WHERE c.event_cod = ANY (ARRAY[4025, 4018, 7]);
/*Permisos*/
 ALTER TABLE  base.vw_ifeb_event_count OWNER TO usereboras; 
 ALTER TABLE  base.vw_ifeb_bi_ds_alarms OWNER TO usereboras; 
 ALTER TABLE  base.vw_ifeb_bi_ds_bi OWNER TO usereboras; 
 ALTER TABLE  base.vw_ifeb_ds_generic_measures OWNER TO usereboras; 
 ALTER TABLE  base.vw_ifeb_ds_generic_alarms OWNER TO usereboras; 
 ALTER TABLE  base.vw_ifeb_bi_speed_by_range OWNER TO usereboras; 
 ALTER TABLE  base.vw_ifeb_bi_alarms_by_range_day OWNER TO usereboras;   
 ALTER TABLE  base.vw_ifeb_ds_drivers OWNER TO usereboras;
/*Funciones*/ 
CREATE OR REPLACE FUNCTION base.ps_event_count( scheme character varying, cp character varying, t_cod character varying, e_cod integer) RETURNS boolean AS $BODY$ DECLARE count integer; table_name character varying; BEGIN table_name=scheme||'.tb_ifeb_bi_vehicle_event_count'; EXECUTE 'select event_count+1 from '|| table_name ||' where code_product='||quote_literal(cp)||' and time_cod='||quote_literal(t_cod)||' and event_cod='||e_cod||'' into count; IF count IS NULL THEN EXECUTE 'insert into '|| table_name ||'(code_product, time_cod, event_cod,event_count) values ('||quote_literal(cp)||','||quote_literal(t_cod)||','||quote_literal(e_cod)||',1)'; ELSE EXECUTE 'UPDATE '|| table_name|| ' SET event_count='||count||' where code_product='||quote_literal(cp)||' and time_cod='||quote_literal(t_cod)||' and event_cod='||e_cod||''; END IF; RETURN TRUE; END; $BODY$ LANGUAGE plpgsql VOLATILE COST 100; ALTER FUNCTION base.ps_event_count(character varying, character varying, character varying, integer) OWNER TO postgres;
